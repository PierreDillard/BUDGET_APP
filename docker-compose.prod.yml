version: '3.8'

services:
  # Main application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: budget-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3001}:3001"
    environment:
      # Database
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      
      # JWT & Security
      JWT_SECRET: "${JWT_SECRET}"
      JWT_EXPIRES_IN: "${JWT_EXPIRES_IN:-7d}"
      
      # App Configuration
      NODE_ENV: production
      PORT: 3001
      CORS_ORIGIN: "${CORS_ORIGIN:-http://localhost:3001}"
      
      # Optional seeding
      SEED_DATABASE: "${SEED_DATABASE:-false}"
      
      # Logging
      LOG_LEVEL: "${LOG_LEVEL:-info}"
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - budget-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: budget-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB:-budget_app}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-budget_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - budget-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: budget-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-redis123}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - budget-network

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: budget-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - budget-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  budget-network:
    driver: bridge
