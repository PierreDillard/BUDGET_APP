

services:
  postgres:
    image: postgres:15-alpine
    container_name: budget-postgres
    restart: unless-stopped
    env_file:
      - ".env"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - budget-network

  app:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: budget-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3001}:3001"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      PORT: 3001
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - budget-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: budget-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - app
    networks:
      - budget-network

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  budget-network:
    driver: bridge
