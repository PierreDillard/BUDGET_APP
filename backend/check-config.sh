#!/bin/bash

# Budget App Backend - Configuration Check Script
# Ce script v√©rifie que le backend est correctement configur√©

echo "üîç Budget App Backend - V√©rification de configuration"
echo "=================================================="
echo ""

# V√©rification Node.js
echo "üì¶ V√©rification de Node.js..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "‚úÖ Node.js install√©: $NODE_VERSION"
    
    # V√©rifier version minimale (18+)
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')
    if [ "$NODE_MAJOR" -ge 18 ]; then
        echo "‚úÖ Version Node.js compatible (18+)"
    else
        echo "‚ùå Version Node.js trop ancienne. Minimum requis: 18+"
        exit 1
    fi
else
    echo "‚ùå Node.js non install√©"
    exit 1
fi

echo ""

# V√©rification npm
echo "üì¶ V√©rification de npm..."
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo "‚úÖ npm install√©: $NPM_VERSION"
else
    echo "‚ùå npm non install√©"
    exit 1
fi

echo ""

# V√©rification des d√©pendances
echo "üì¶ V√©rification des d√©pendances..."
if [ -f "package.json" ]; then
    echo "‚úÖ package.json trouv√©"
    
    if [ -d "node_modules" ]; then
        echo "‚úÖ node_modules trouv√©"
    else
        echo "‚ö†Ô∏è  node_modules manquant. Ex√©cutez: npm install"
    fi
else
    echo "‚ùå package.json non trouv√©"
    exit 1
fi

echo ""

# V√©rification de l'environnement
echo "üîß V√©rification de la configuration..."
if [ -f ".env" ]; then
    echo "‚úÖ Fichier .env trouv√©"
    
    # V√©rifier les variables essentielles
    if grep -q "DATABASE_URL" .env; then
        echo "‚úÖ DATABASE_URL configur√©"
    else
        echo "‚ùå DATABASE_URL manquant dans .env"
    fi
    
    if grep -q "JWT_SECRET" .env; then
        echo "‚úÖ JWT_SECRET configur√©"
    else
        echo "‚ùå JWT_SECRET manquant dans .env"
    fi
    
    if grep -q "JWT_REFRESH_SECRET" .env; then
        echo "‚úÖ JWT_REFRESH_SECRET configur√©"
    else
        echo "‚ùå JWT_REFRESH_SECRET manquant dans .env"
    fi
    
else
    echo "‚ö†Ô∏è  Fichier .env manquant. Copiez .env.example vers .env"
fi

echo ""

# V√©rification PostgreSQL
echo "üóÑÔ∏è  V√©rification de PostgreSQL..."
if command -v psql &> /dev/null; then
    echo "‚úÖ Client PostgreSQL install√©"
else
    echo "‚ö†Ô∏è  Client PostgreSQL non trouv√© (optionnel)"
fi

# Tentative de connexion √† la base de donn√©es
if [ -f ".env" ]; then
    DATABASE_URL=$(grep "DATABASE_URL" .env | cut -d '=' -f2 | tr -d '"')
    if [ ! -z "$DATABASE_URL" ]; then
        echo "üîç Test de connexion √† la base de donn√©es..."
        if command -v psql &> /dev/null; then
            if timeout 5 psql "$DATABASE_URL" -c "SELECT 1;" &> /dev/null; then
                echo "‚úÖ Connexion √† la base de donn√©es r√©ussie"
            else
                echo "‚ùå Impossible de se connecter √† la base de donn√©es"
                echo "   V√©rifiez que PostgreSQL est d√©marr√© et que les param√®tres sont corrects"
            fi
        fi
    fi
fi

echo ""

# V√©rification Prisma
echo "üîß V√©rification de Prisma..."
if [ -f "prisma/schema.prisma" ]; then
    echo "‚úÖ Schema Prisma trouv√©"
else
    echo "‚ùå Schema Prisma manquant"
fi

# V√©rifier si le client Prisma est g√©n√©r√©
if [ -d "node_modules/.prisma" ]; then
    echo "‚úÖ Client Prisma g√©n√©r√©"
else
    echo "‚ö†Ô∏è  Client Prisma non g√©n√©r√©. Ex√©cutez: npx prisma generate"
fi

echo ""

# V√©rification de la structure des fichiers
echo "üìÅ V√©rification de la structure du projet..."
REQUIRED_FILES=(
    "src/main.ts"
    "src/app.module.ts"
    "src/auth/auth.module.ts"
    "src/users/users.module.ts"
    "src/incomes/incomes.module.ts"
    "src/expenses/expenses.module.ts"
    "src/planned-expenses/planned-expenses.module.ts"
    "src/balance/balance.module.ts"
    "src/prisma/prisma.module.ts"
)

MISSING_FILES=0
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file"
    else
        echo "‚ùå $file manquant"
        MISSING_FILES=$((MISSING_FILES + 1))
    fi
done

echo ""

# R√©sum√© final
echo "üìã R√âSUM√â DE LA V√âRIFICATION"
echo "============================"
if [ $MISSING_FILES -eq 0 ]; then
    echo "üéâ Configuration compl√®te et correcte !"
    echo ""
    echo "üöÄ Commandes pour d√©marrer :"
    echo "   npm run db:generate     # G√©n√©rer le client Prisma"
    echo "   npm run db:migrate      # Cr√©er les tables"
    echo "   npm run db:seed         # Donn√©es de d√©monstration"
    echo "   npm run start:dev       # D√©marrer en mode d√©veloppement"
    echo ""
    echo "üîó Une fois d√©marr√© :"
    echo "   API: http://localhost:3001/api/v1"
    echo "   Docs: http://localhost:3001/api/docs"
else
    echo "‚ùå Configuration incompl√®te ($MISSING_FILES fichiers manquants)"
    echo "   V√©rifiez l'installation et la structure du projet"
fi

echo ""
echo "üîç V√©rification termin√©e."
