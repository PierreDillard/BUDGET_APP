generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model planned_expenses {
  id         String   @id @default(uuid())
  user_id    String
  label      String
  amount     Float
  date       DateTime
  spent      Boolean  @default(false)
  category   String   @default("other")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model rec_expenses {
  id           String   @id @default(uuid())
  user_id      String
  label        String
  amount       Float
  day_of_month Int
  category     String   @default("other")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model rec_incomes {
  id           String   @id @default(uuid())
  user_id      String
  label        String
  amount       Float
  day_of_month Int
  category     String   @default("salary")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id               String             @id @default(uuid())
  email            String             @unique
  password_hash    String
  currency         String             @default("EUR")
  month_start_day  Int                @default(1)
  margin_pct       Int                @default(0)
  notification     Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime
  planned_expenses planned_expenses[]
  rec_expenses     rec_expenses[]
  rec_incomes      rec_incomes[]
  refresh_tokens   refresh_tokens[]
  balance_adjustments balance_adjustments[]
}

model balance_adjustments {
  id          String        @id @default(uuid())
  user_id     String
  amount      Float
  description String
  type        AdjustmentType @default(MANUAL_ADJUSTMENT)
  created_at  DateTime      @default(now())
  users       users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum AdjustmentType {
  MANUAL_ADJUSTMENT
  CORRECTION
  MONTHLY_RESET
}

enum ExpenseCategory {
  RENT
  UTILITIES
  INSURANCE
  FOOD
  TRANSPORT
  HEALTH
  SUBSCRIPTION
  OTHER
}

enum IncomeCategory {
  SALARY
  FREELANCE
  INVESTMENT
  ALLOWANCE
  OTHER
}

enum PlannedExpenseCategory {
  TRAVEL
  EQUIPMENT
  CLOTHING
  ELECTRONICS
  HOME
  HEALTH
  EDUCATION
  GIFT
  OTHER
}
